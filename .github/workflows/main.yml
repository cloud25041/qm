# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_to_docker_image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['5.0.x']
        
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
          
      - name: Restore all project nuget dependencies
        run: dotnet restore
        
      - name: Build solution and analyze using sonar cloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"cloud25041_qm" /o:"cloud25041" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release --no-restore
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
      - name: Run unit test
        run: dotnet test --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
        
      - name: Upload dotnet unit test results
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-results-${{ matrix.dotnet-version }}
          path: TestResults-${{ matrix.dotnet-version }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: eost002
          password: c90d549d-d238-453e-bea7-78195e087c75
          
      - name: Build AR_API and push to docker container image repository
        uses: docker/build-push-action@v2
        with:
          file: ./AR_API/Dockerfile
          context: .
          push: true
          tags: eost002/ar_api:latest
          
      - name: Build Staff_API and push to docker container image repository
        uses: docker/build-push-action@v2
        with:
          file: ./Staff_API/Dockerfile
          context: .
          push: true
          tags: eost002/staff_api:latest
          
      - name: Build Meeting_API and push to docker container image repository
        uses: docker/build-push-action@v2
        with:
          file: ./Meeting_API/Dockerfile
          context: .
          push: true
          tags: eost002/meeting_api:latest
          
      - name: Build UI and push to docker container image repository
        uses: docker/build-push-action@v2
        with:
          file: ./UI/Dockerfile
          context: .
          push: true
          tags: eost002/ui:latest
          
      - name: Build StaffUI and push to docker container image repository
        uses: docker/build-push-action@v2
        with:
          file: ./StaffUI/Dockerfile
          context: .
          push: true
          tags: eost002/staffui:latest
  
  staff_build_to_azure_app_service:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build ./StaffUI/StaffUI.csproj --configuration Release

      - name: dotnet publish
        run: dotnet publish ./StaffUI/StaffUI.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  staff_deploy_to_azure_app_service:
    runs-on: windows-latest
    needs: staff_build_to_azure_app_service
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'staffui12345'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_0312F93FF78F4E50A95D9376051582B7 }}
          package: .
  
  user_build_to_azure_app_service:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build ./UI/UI.csproj --configuration Release

      - name: dotnet publish
        run: dotnet publish ./UI/UI.csproj -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  user_deploy_to_azure_app_service:
    runs-on: windows-latest
    needs: user_build_to_azure_app_service
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'ui12345'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_38208BEA8E904AD1ACD9A835790C4189 }}
          package: .
