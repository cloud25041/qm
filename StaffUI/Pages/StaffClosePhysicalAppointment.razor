
@page "/staffclosephysicalappointment"
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.Components.Routing
@using StaffUI.Models;
@inject LocalStorage.ILocalStorageService localStorage;
@using Newtonsoft.Json;


<h3>Physical Counters</h3>

@if (_error == true)
{
    <h5> @_message</h5>
}


<p>List of Active Physical Counters.</p>

<table class="table">
    <tbody>
        <div class="col py-3 px-lg-5 border bg-light">
            AppointmentId: <input type="text" placeholder="Username" @bind="@_appointmentId" />
        </div>
        <tr>
            <td>
                <button class="btn btn-primary" @onclick=@(CompletedPhysicalCounter)>Completed</button>
                <button class="btn btn-primary" @onclick=@(NoShowPhysicalCounter)>No Show</button>
            </td>
        </tr>

    </tbody>
</table>

<button class="btn btn-dark" @onclick=@((BackButton))>Back</button>




@code
{

    private PhysicalCounterIdList[] list;
    public string _appointmentId;
    private bool _error = false;
    private string _message = "";

    public class PhysicalCounterIdList
    {
        public int PhysicalCounterId { get; set; }
    }

    public class PhysicalCounterDetails
    {
        public Guid appointmentId { get; set; }
        public Guid StaffId { get; set; }
        public int state { get; set; }
    }

    private async Task CompletedPhysicalCounter()
    {
        LoginDetails accountInfo = await localStorage.GetItem<LoginDetails>("account_info");
        PhysicalCounterDetails physicalCounterDetails = new PhysicalCounterDetails();
        Guid appointmentGuid = Guid.Parse(_appointmentId);
        physicalCounterDetails.appointmentId = appointmentGuid;
        physicalCounterDetails.state = 4;
        physicalCounterDetails.StaffId = accountInfo.AccountId;
        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44310/api/appointment/UpdateAppointmentState", physicalCounterDetails);
        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                var results = JsonConvert.DeserializeObject<bool>(content);
                if (results == true)
                {
                    _error = false;
                    NavManager.NavigateTo("/staffmainselection");
                }
                else
                {
                    _error = true;
                    _message = "Appointment failed to update. Please try again";
                }
            }
        }
    }

    private async Task NoShowPhysicalCounter()
    {

        LoginDetails accountInfo = await localStorage.GetItem<LoginDetails>("account_info");
        PhysicalCounterDetails physicalCounterDetails = new PhysicalCounterDetails();
        Guid appointmentGuid = Guid.Parse(_appointmentId);
        physicalCounterDetails.appointmentId = appointmentGuid;
        physicalCounterDetails.state = 5;
        physicalCounterDetails.StaffId = accountInfo.AccountId;
        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44310/api/appointment/UpdateAppointmentState", physicalCounterDetails);
        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                var results = JsonConvert.DeserializeObject<bool>(content);
                if (results == true)
                {
                    _error = false;
                    NavManager.NavigateTo("/staffmainselection");
                }
                else
                {
                    _error = true;
                    _message = "Appointment failed to update. Please try again";
                }
            }

        }

    }

    private async Task BackButton()
    {
        NavManager.NavigateTo("/staffmainselection");
    }
}
