
@page "/staffjoinzoomappointment"
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Routing

@inject IModalService modal
@inject HttpClient HttpClient
@inject NavigationManager UriHelper

@using Newtonsoft.Json;
@using StaffUI.Models;
@using Microsoft.AspNetCore.Components.Routing
@inject LocalStorage.ILocalStorageService localStorage;
@using StaffUI.DateTimeSlotHelper;

<h3>Please Join A Zoom Appointment</h3>

@if (_loading)
{
    <h3>Registering...</h3>
}
else
{
    if (gotAppointmentFlag)
    {
        <thead class="table-primary">
            <tr>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Name of Customer</th>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Date</th>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Timeslot</th>
                <th class="col-xs-4 col-sm-4 col-md-4 col-lg-4" style="text-align:center">Zoom Link</th>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Action</th>
            </tr>
        </thead>

        if (AppointmentList != null)
        {
            foreach (var appointment in AppointmentList)
            {

                DateTimeSlotHelper dateTimeSlotHelper = new DateTimeSlotHelper();
                var tempTime = dateTimeSlotHelper.GetTimebySlot(appointment.AppointmentSlotId);

                if (appointment.AppointmentState == 3 || appointment.AppointmentState == 2)
                {
                    <div>
                        <table class="table table-hover">

                            <tbody>
                                <tr>
                                    <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">@appointment.CustomerName</td>
                                    <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">@appointment.AppointmentDate.ToLongDateString()</td>
                                    <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">@tempTime</td>
                                    <td class="col-xs-4 col-sm-4 col-md-4 col-lg-4" style="text-align:center">@appointment.ZoomId</td>
                                    <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">
                                        <button class="btn btn-primary" @onclick=@(() => AppointmentCompletedButton(appointment.AppointmentId))>Completed</button>
                                        <button class="btn btn-dark" @onclick=@(() => NoShowButton(appointment.AppointmentId))>No Show</button>
                                    </td>
                                </tr>

                            </tbody>
                        </table>
                    </div>
                }


            }
        }
    }
    else
    {

        <tr>
            <td colspan="5">No Record Found.</td>
        </tr>

    }

    


}

<button class="btn btn-dark" @onclick=@((BackButton))>Back</button>

@code
{
    int i = 0;
    #region Field
    [Parameter]
    public Guid accountId { get; set; }
    [Parameter]
    public string userName { get; set; }

    public Guid userAccountId { get; set; }
    private bool _loading;
    public string userFullName { get; set; }

    public List<StaffAppointmentDetails> AppointmentList { get; set; }

    public List<UserAccountInfo> UserAccountInfoList { get; set; }

    public class VirtualCounterDetails
    {
        public Guid appointmentId { get; set; }
        public Guid StaffId { get; set; }
        public int state { get; set; }
    }
    public string _appointmentId;
    private bool _error = false;
    private string _message = "";

    private bool gotAppointmentFlag = false;
    #endregion

    private void BackButton()
    {
        NavManager.NavigateTo("/staffmainselection");
    }

    private async Task AppointmentCompletedButton(Guid AppointmentId)
    {

        VirtualCounterDetails virtualCounterDetails = new VirtualCounterDetails();

        virtualCounterDetails.appointmentId = AppointmentId;
        virtualCounterDetails.state = 4;
        var responseMessage = await HttpClient.PostAsJsonAsync(Program.staffRestApiUrl + "/api/appointment/UpdateAppointmentState", virtualCounterDetails);
        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                var results = JsonConvert.DeserializeObject<bool>(content);
                if (results == true)
                {
                    _error = false;
                    NavManager.NavigateTo("/staffmainselection");
                }
                else
                {
                    _error = true;
                    _message = "Appointment failed to update. Please try again";
                }
            }
        }
    }

    private async Task NoShowButton(Guid AppointmentId)
    {

        VirtualCounterDetails virtualCounterDetails = new VirtualCounterDetails();

        virtualCounterDetails.appointmentId = AppointmentId;
        virtualCounterDetails.state = 5;
        var responseMessage = await HttpClient.PostAsJsonAsync(Program.staffRestApiUrl + "/api/appointment/UpdateAppointmentState", virtualCounterDetails);
        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                var results = JsonConvert.DeserializeObject<bool>(content);
                if (results == true)
                {
                    _error = false;
                    NavManager.NavigateTo("/staffmainselection");
                }
                else
                {
                    _error = true;
                    _message = "Appointment failed to update. Please try again";
                }
            }
        }

    }

    
    protected override async void OnInitialized()
    {
        LoginDetails accountInfo = await localStorage.GetItem<LoginDetails>("account_info");
        AppointmentList = new List<StaffAppointmentDetails>();

        var staffAccountId = accountInfo.AccountId;

        var responseMessage = await HttpClient.PostAsJsonAsync(Program.staffRestApiUrl + "/api/appointment/GetAppointmentDetailsByStaffAccountId", staffAccountId);
        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                var content = await responseMessage.Content.ReadAsStringAsync();
                Console.WriteLine(content);
                var results = JsonConvert.DeserializeObject<List<StaffAppointmentDetails>>(content);
                if (results.Count > 0)
                {
                    gotAppointmentFlag = true;

                    var responseForUserAccount = await HttpClient.GetAsync(Program.staffRestApiUrl + "/api/account/getallaccount");
                    if (responseForUserAccount.IsSuccessStatusCode)
                    {
                        var contentForUserAccount = await responseForUserAccount.Content.ReadAsStringAsync();
                        UserAccountInfoList = JsonConvert.DeserializeObject<List<UserAccountInfo>>(contentForUserAccount);

                        if (UserAccountInfoList != null)
                        {
                            var listOfUserAccount = await localStorage.GetItem<List<UserAccountInfo>>("useraccount_info");
                            listOfUserAccount = UserAccountInfoList;
                            string userAccountName;
                            foreach (var userAccount2 in listOfUserAccount)
                            {
                                if (userAccount2.accountId == userAccountId)
                                {
                                    userAccountName = userAccount2.name;
                                }
                            }
                        }

                    }

                }
                foreach (var eachResults in results)
                {
                    i = AppointmentList.Count;
                    AppointmentList.Add(eachResults);
                    this.StateHasChanged();
                }

                this.StateHasChanged();

            }
            else
            {
                var content = await responseMessage.Content.ReadAsStringAsync();
            }
        }
    }



}
