
@page "/signup"
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject IModalService modal
@using Newtonsoft.Json; 
@using StaffUI.Models;

<h3>Staff Signup</h3>

@if(_errorMessageFlag == true)
{
    <h5>@_errorMessage</h5>
}
else
{
    <h5></h5>
}

@if (_loading)
{
    <h3>Registering...</h3>
}
else
{
    <div class="col py-3 px-lg-5 border bg-light">
        First name: <input type="text" @bind="@FirstName" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Last name: <input type="text" @bind="@LastName" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Username: <input type="text" @bind="@Username" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Password: <input type="password" @bind="@Password" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Mobile number: <input type="text" @bind="@MobileNo" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Email: <input type="text" @bind="@Email" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Staff Sign Up Code: <input type="text" @bind="@StaffKey" />
    </div>
    
    <button class="btn btn-primary" @onclick="RegisterAccount">Register</button>
    <button class="btn btn-secondary" @onclick="BackFunction">Cancel</button>
}

@code
{
    #region Fields
    private string _firstName;
    private string _lastName;
    private string _username;
    private string _password;
    private string _mobileNo;
    private string _email;
    private string _staffkey;
    private bool _loading;
    private bool _errorMessageFlag = false;
    private string _errorMessage;

    #endregion


    #region Properties


    public string FirstName
    {
        get { return _firstName; }
        set { _firstName = value; }
    }

    public string LastName
    {
        get { return _lastName; }
        set { _lastName = value; }
    }

    public string Username
    {
        get { return _username; }
        set { _username = value; }
    }

    public string Password
    {
        get { return _password; }
        set { _password = value; }
    }

    public string MobileNo
    {
        get { return _mobileNo; }
        set { _mobileNo = value; }
    }

    public string Email
    {
        get { return _email; }
        set { _email = value; }
    }
    public string StaffKey
    {
        get { return _staffkey; }
        set { _staffkey = value; }
    }


    #endregion

    #region Private Method


    private async Task BackFunction()
    {
        NavManager.NavigateTo("/account");
    }


    private async Task RegisterAccount()
    {
        _errorMessageFlag = false;
        _errorMessage = "";
        string validationError = "";

        // validation part

        validationError = ValidationCheck(_username, _password, _mobileNo, _email, _firstName, _lastName, _staffkey);

        if(validationError == null)
        {
            SignUpAccountDetails accountDetails = new SignUpAccountDetails();
            accountDetails.TransactionId = Guid.NewGuid();
            accountDetails.FirstName = FirstName;
            accountDetails.LastName = LastName;
            accountDetails.Username = Username;
            accountDetails.Password = Password;
            accountDetails.MobileNo = Convert.ToInt32(MobileNo);
            accountDetails.Email = Email;
            accountDetails.StaffKey = StaffKey;

            try
            {
                var checkStaffPinResponseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44310/api/agency/CheckAgencyPinValid", accountDetails.StaffKey);
                if (checkStaffPinResponseMessage != null)
                {
                    if (checkStaffPinResponseMessage.IsSuccessStatusCode)
                    {
                        string staffAgencyPincontent = await checkStaffPinResponseMessage.Content.ReadAsStringAsync();
                        var staffPinResults = JsonConvert.DeserializeObject<AgencyPinClass>(staffAgencyPincontent);

                        if (staffPinResults.AgencyIsValidFlag == true || staffPinResults.AgencyId != 0)
                        {
                            accountDetails.AgencyId = staffPinResults.AgencyId;
                            // check for email and username
                            var checkEmailAndUsernameResponseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44310/api/account/checkUsernameAndEmailAvail", accountDetails);
                            if (checkEmailAndUsernameResponseMessage != null)
                            {
                                if (checkEmailAndUsernameResponseMessage.IsSuccessStatusCode)
                                {
                                    string checkEmailAndUsernameContent = await checkEmailAndUsernameResponseMessage.Content.ReadAsStringAsync();
                                    // var word = "";
                                    var checkEmailAndUsernameResult = JsonConvert.DeserializeObject<ValidationDetails>(checkEmailAndUsernameContent);
                                    if (checkEmailAndUsernameResult.IsUsernameTaken != true && checkEmailAndUsernameResult.IsEmailTaken != true)
                                    {
                                        accountDetails.AccountId = Guid.NewGuid();
                                        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44310/api/account/createaccount", accountDetails);
                                        if (responseMessage != null)
                                        {
                                            if (responseMessage.IsSuccessStatusCode)
                                            {
                                                _loading = true;
                                                this.StateHasChanged();

                                                modal.Show<SuccessLogin>("Account created");
                                                NavManager.NavigateTo("/login");

                                            }
                                        }

                                        else
                                        {
                                        }


                                        // save if good
                                    }
                                    else if (checkEmailAndUsernameResult.IsUsernameTaken == true && checkEmailAndUsernameResult.IsEmailTaken != true)
                                    {
                                        modal.Show<FailedValidation>("Username taken");
                                        _errorMessageFlag = true;
                                        _errorMessage = "Username Taken";
                                    }
                                    else if (checkEmailAndUsernameResult.IsUsernameTaken != true && checkEmailAndUsernameResult.IsEmailTaken == true)
                                    {
                                        modal.Show<FailedValidation>("Email taken");
                                        _errorMessageFlag = true;
                                        _errorMessage = "Email Taken";
                                    }
                                    else
                                    {
                                        modal.Show<FailedValidation>("Username and Email taken");
                                        _errorMessageFlag = true;
                                        _errorMessage = "Username And Email Taken";
                                    }
                                }
                                else
                                {

                                }
                            }
                        }
                        else
                        {
                            _errorMessageFlag = true;
                            _errorMessage = "Wrong Staff pin";
                            // invalid key
                        }
                    }

                    else
                    {
                    }
                }
                else
                {
                }


            }

            catch (Exception ex)
            {

            }

        }

        else
        {
            _errorMessageFlag = true;
            _errorMessage = validationError;
        }

        _loading = false;
        this.StateHasChanged();
    }



    private string ValidationCheck(string username, string password, string mobileno, string email, string firstname, string lastname, string staffpin)
    {
        bool errorflag = false;
        string errorMessage = "Please enter your ";

        if (firstname == "" || firstname == null)
        {
            errorMessage = errorMessage + "First Name, ";
            errorflag = true;
        }

        if (lastname == "" || lastname == null)
        {
            errorMessage = errorMessage + "Last Name, ";
            errorflag = true;
        }


        if (username == "" || username == null)
        {
            errorMessage = errorMessage + "Username, ";
            errorflag = true;

        }

        if (password == "" || password == null)
        {
            errorMessage = errorMessage + "Password, ";
            errorflag = true;
        }

        if (mobileno == "" || mobileno == null)
        {
            errorMessage = errorMessage + "Mobile Number, ";
            errorflag = true;

        }

        if (email == "" || email == null)
        {
            errorMessage = errorMessage + "Email, ";
            errorflag = true;
        }

        if(staffpin == "" || staffpin == null)
        {
            errorMessage = errorMessage + "Staff Pin ";
            errorflag = true;
        }

        if (errorflag == false)
        {
            errorMessage = null;
        }

        return errorMessage;



    }
    #endregion




}
