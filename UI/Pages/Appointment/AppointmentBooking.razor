
@page "/appointment/appointmentbooking"
@inject IModalService modal
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject NavigationManager UriHelper
@using UI.Models;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Routing;
@using System.ComponentModel.DataAnnotations;
@using UI.DateTimeSlotHelper;
@inject LocalStorage.ILocalStorageService localStorage;

<h3>Physical Appointment Booking</h3>

@if (_loading)
{
    <h3>Loading Up Appointment Slots...</h3>
}
else
{
    <p class=" alert-danger"><strong>@errorMessage</strong></p>
    <div class="col py-3 px-lg-5 border bg-light">
        Appointment Type: <SfDropDownList TItem="AppointmentType" TValue="int?" @bind-Value="@TypeVal" DataSource="@AppointmentTypeList" Placeholder="Select Appointment Type">
            <DropDownListFieldSettings Text="Type" Value="TypeId"></DropDownListFieldSettings>
            <DropDownListEvents TItem="AppointmentType" TValue="int?" ValueChange="TypeSelectedHandler"></DropDownListEvents>
        </SfDropDownList>
    </div>

    if (_agencyPickClickFlag)
    {
        <div class="col py-3 px-lg-5 border bg-light">
            Agency Name: <SfDropDownList TItem="Agency" TValue="int?" @bind-Value="@AgencyVal" DataSource="@AgencyList" Placeholder="Select an Agency">
                <DropDownListFieldSettings Text="AgencyName" Value="AgencyId"></DropDownListFieldSettings>
                <DropDownListEvents TItem="Agency" TValue="int?" ValueChange="AgencySelectedHandler"></DropDownListEvents>
            </SfDropDownList>
        </div>
    }

    if (_detailPickClickFlag)
    {
        <div class="col py-3 px-lg-5 border bg-light">
            Physical Appointment Date: <SfDatePicker TValue="DateTime?" @bind-Value="@SelectedDate" Placeholder="Select a Date" Min="@MinDate" Max="@MaxDate">
                <DatePickerEvents TValue="DateTime?" ValueChange="DateSelectedHandler"></DatePickerEvents>
            </SfDatePicker>
        </div>
    }
    if (SelectedDate != null)
    {
        <p>DropDownList value is:<strong>@SelectedDate.Value.ToLongDateString()</strong></p>
        <div class="col py-3 px-lg-5 border bg-light">
            Available Time: <SfDropDownList TItem="AvailableSlots" TValue="int?" @bind-Value="@SlotVal" DataSource="@selectedDateSlotList" Placeholder="Select a Time">
                <DropDownListFieldSettings Text="Time" Value="SlotId"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <p>DropDownList value is:<strong>@SlotVal</strong></p>

    }
    if (_display == true)
    {
        <p>Date is: @test1</p>
        <p>Time slot is: @test2</p>
    }
    <div class="col py-3">
        <button class="btn btn-primary" @onclick="NavigateBook">Book</button>
        <button class="btn btn-secondary" @onclick="NavigateCancel">Cancel</button>
    </div>
    <button class="btn btn-secondary" @onclick="@(() => modal.Show<AppointmentBookingFail>("Booking has Failed"))">Display Fail Modal</button>
}

@code
{
    protected override void OnInitialized()
    {
        AppointmentTypeList = new List<AppointmentType>();
        AppointmentTypeList.Add(new AppointmentType() { Type = "Physical", TypeId = 1 });
        AppointmentTypeList.Add(new AppointmentType() { Type = "Virtual", TypeId = 2 });


        //var response = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/userqueue/getagencyappointmentinformation", agencyId);
        ////var response = await HttpClient.GetAsync("https://localhost:44355/api/userqueue/getagencyappointmentinformation");
        //if (response != null)
        //{
        //    string content = await response.Content.ReadAsStringAsync();
        //    var resultList = JsonConvert.DeserializeObject<IList<AvailableSlots>>(content);
        //    availableSlotList = resultList;
        //    _detailPickClickFlag = true;
        //    this.StateHasChanged();

        //}
    }

    #region Fields
    private bool _completedFormFlag = false;
    private bool _agencyPickClickFlag = false;
    private bool _loading;
    private bool _detailPickClickFlag = false;
    public int? SlotVal;
    public int? TypeVal;
    public int? AgencyVal;
    public int? ConcurrentUser;

    public DateTime? test1;
    public string test2;
    private string errorMessage;
    private bool _display = false;

    #endregion

    #region Properties

    [Parameter]
    public string accountId { get; set; }
    [Parameter]
    public string userName { get; set; }
    [Parameter]
    public string password { get; set; }
    [Parameter]
    public string appointmentDate { get; set; }
    [Parameter]
    public string appointmentTime { get; set; }
    [Parameter]
    public string queueNo { get; set; }
    [Parameter]
    public string serviceId { get; set; }
    [Parameter]
    public string agencyId { get; set; }

    // set min & max dates
    public DateTime MaxDate { get; set; } = DateTime.Now.AddDays(31).Date;
    public DateTime MinDate { get; set; } = DateTime.Now.Date;

    public DateTime? SelectedDate { get; set; } = null;
    public int SelectedSlot { get; set; }

    public class AppointmentType
    {
        public string Type { get; set; }

        public int TypeId { get; set; }
    }

    public class Agency
    {
        public string AgencyName { get; set; }
        public int AgencyId { get; set; }
        public string AgencyPin { get; set; }
        public string Location { get; set; }
        public int PhysicalConcurrentUser { get; set; }
        public int VirtualConcurrentUser { get; set; }

    }
    public IList<AvailableSlots> availableSlotList { get; set; }
    public IList<AvailableSlots> selectedDateSlotList { get; set; }
    public IList<AppointmentType> AppointmentTypeList { get; set; }
    public IList<Agency> AgencyList { get; set; }


    #endregion

    #region Private Method

    private async void TypeSelectedHandler()
    {
        // The URL string needs to point to Staff API Controller
        var response = await HttpClient.GetAsync("https://localhost:44310/api/appointment/getagencyinfolist");
        if (response != null)
        {
            string content = await response.Content.ReadAsStringAsync();
            var resultList = JsonConvert.DeserializeObject<List<Agency>>(content);
            AgencyList = resultList;
            _agencyPickClickFlag = true;
            this.StateHasChanged();

        }

        if (_completedFormFlag == true)
        {
            AgencySelectedHandler();
            this.StateHasChanged();
        }
    }

    private void AgencySelectedHandler()
    {
        _detailPickClickFlag = true;
        if (_completedFormFlag == true)
        {
            DateSelectedHandler();
            this.StateHasChanged();
        }
        this.StateHasChanged();
    }

    private async void DateSelectedHandler()
    {
        _completedFormFlag = true;
        foreach (var agency in AgencyList)
        {
            if (agency.AgencyId == AgencyVal)
            {
                if (TypeVal == 1)
                {
                    ConcurrentUser = agency.PhysicalConcurrentUser;
                    break;
                }
                if (TypeVal == 2)
                {
                    ConcurrentUser = agency.VirtualConcurrentUser;
                    break;
                }
            }
        }
        DateTimeSlotHelper dateTimeSlotHelper = new DateTimeSlotHelper();
        UserAgencyInput userAgencyInput = new UserAgencyInput();
        userAgencyInput.AgencyId = AgencyVal;
        userAgencyInput.AppointmentTypeId = TypeVal;
        userAgencyInput.SelectedDate = SelectedDate;
        userAgencyInput.ConcurrentUser = ConcurrentUser;
        selectedDateSlotList = new List<AvailableSlots>();
        var response = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/appointment/getavailableappointment", userAgencyInput);
        if (response != null)
        {
            var content = await response.Content.ReadAsStringAsync();
            var resultList = JsonConvert.DeserializeObject<List<AvailableSlots>>(content);
            List<AvailableSlots> listOfNewAvailableSlots = new List<AvailableSlots>();
            foreach (var result in resultList)
            {
                //var tempValue = result;
                //tempValue.Time = dateTimeSlotHelper.GetTimebySlot(result.SlotId);
                //listOfTimeInString.Add(dateTimeSlotHelper.GetTimebySlot(result.SlotId));
                //availableSlotList.Add(tempValue);

                AvailableSlots availableSlots = new AvailableSlots() { Date = result.Date, Time = dateTimeSlotHelper.GetTimebySlot(result.SlotId), SlotId = result.SlotId };
                selectedDateSlotList.Add(availableSlots);
                //listOfNewAvailableSlots.Add(availableSlots);

            }
        }

    }

    private async void NavigateBook()
    {
        if (SelectedDate == null || SlotVal == null || TypeVal == null || AgencyVal == null)
        {
            errorMessage = "Please Select a Valid Option from the dropdown selection.";
            this.StateHasChanged();
        }
        else
        {
            DateTimeSlotHelper dateTimeSlotHelper = new DateTimeSlotHelper();
            AccountInfo accountInfo = await localStorage.GetItem<AccountInfo>("account_info");

            CreateAppointmentDetails createAppointmentDetails = new CreateAppointmentDetails();
            createAppointmentDetails.AgencyId = AgencyVal ?? default(int);
            createAppointmentDetails.AppointmentDate = SelectedDate ?? default(DateTime);
            createAppointmentDetails.AppointmentSlotId = SlotVal ?? default(int);

            createAppointmentDetails.AppointmentType = TypeVal ?? default(int);
            if(createAppointmentDetails.AppointmentType == 1)
            {
                createAppointmentDetails.AppointmentState = 101;
            }
            else
            {
                createAppointmentDetails.AppointmentState = 1;
            }

            createAppointmentDetails.UserAccountId = accountInfo.accountId;

            var checkResponseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/account/createAppointment", createAppointmentDetails);
            if (checkResponseMessage.IsSuccessStatusCode)
            {
                if (checkResponseMessage != null)
                {
                    appointmentDate = SelectedDate.Value.Date.ToString("dd MMM yyyy");

                    appointmentTime = dateTimeSlotHelper.GetTimebySlot(SlotVal ?? default(int));

                    string agencyName = "";

                    foreach (var agency in AgencyList)
                    {
                        if (agency.AgencyId == AgencyVal)
                        {
                            agencyName = agency.AgencyName;
                            break;
                        }
                    }
                    NavManager.NavigateTo($"/appointment/appointmentbookingsuccess/{agencyName}/{appointmentDate}/{appointmentTime}");
                }
            }
            else
            {
                modal.Show<AppointmentBookingFail>("Booking has Failed");
            }
        }
    }

    private void NavigateCancel()
    {
        NavManager.NavigateTo("/appointment/appointmentmainselection/{accountId}/{username}/{password}");
    }


    #endregion
}


