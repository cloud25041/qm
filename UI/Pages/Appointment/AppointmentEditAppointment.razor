
@page "/appointment/appointmenteditappointment/{appointmentId}"
@inject IModalService modal
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.Components.Routing;
@using System.ComponentModel.DataAnnotations;
@using UI.Models;
@using UI.DateTimeSlotHelper;
@inject LocalStorage.ILocalStorageService localStorage;
@using Newtonsoft.Json;

@if (_loading)
{
    <h3>Loading Up Appointment Slots...</h3>
}
else
{
    <div class="col py-3 px-lg-5 border bg-light">
        New Appointment Date: <SfDatePicker TValue="DateTime?" @bind-Value="@SelectedDate" Placeholder="Select a Date" Min="@MinDate" Max="@MaxDate">
            <DatePickerEvents TValue="DateTime?" ValueChange="DateSelectedHandler"></DatePickerEvents>
        </SfDatePicker>
    </div>

    if (SelectedDate != null)
    {
        <p>DropDownList value is:<strong>@SelectedDate.Value.Date</strong></p>
        <div class="col py-3 px-lg-5 border bg-light">
            Available Time: <SfDropDownList TItem="AvailableSlots" TValue="int?" @bind-Value="@SlotValue" DataSource="@selectedDateSlotList" Placeholder="Select a Time">
                <DropDownListFieldSettings Text="Time" Value="SlotId"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <p>DropDownList value is:<strong>@SlotValue</strong></p>

    }

    <div class="col py-3">
        <button class="btn btn-primary" @onclick="NavigateBook">Book</button>
        <button class="btn btn-secondary" @onclick="NavigateCancel">Cancel</button>
    </div>
}

@code
{
    [Parameter]
    public string appointmentId { get; set; }

    public string appointmentDate { get; set; }

    public int AppointmentSlotId { get; set; }

    public string appointmentType { get; set; }

    public string agencyId { get; set; }

    public string queueNo { get; set; }

    public AppointmentDetails currentAppointmentdetails { get; set; }
    public IList<AvailableSlots> availableSlotList { get; set; }
    public IList<AvailableSlots> selectedDateSlotList { get; set; }
    public IList<Agency> AgencyList { get; set; }

    protected override async void OnInitialized()
    {

        var apptid = Guid.Parse(appointmentId);

        AppointmentDetails currentAppointmentdetails = new AppointmentDetails();

        var response = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/appointment/GetAppointmentByAppointmentId", apptid);
        {
            if (response != null)
            {
                string content = await response.Content.ReadAsStringAsync();
                var resultList = JsonConvert.DeserializeObject<AppointmentDetails>(content);
                //currentAppointmentdetails = resultList;
                appointmentType = resultList.AppointmentType.ToString();
                appointmentDate = resultList.AppointmentDate.ToString();
                AppointmentSlotId = resultList.AppointmentSlotId;

            }
        }




    }

    private bool _loading;
    private string errorMessage;


    public DateTime? SelectedDate { get; set; } = null;
    public int SelectedSlot { get; set; }
    public int? SlotValue;
    public int? TypeValue;
    public int? AgencyValue;
    public int? ConcurrentUser;


    // set min & max dates
    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month + 1, DateTime.Now.Day);


    // set location list
    public class LocationData
    {
        public string Name { get; set; }
        public string Id { get; set; }
    }

    public class Agency
    {
        public string AgencyName { get; set; }
        public int AgencyId { get; set; }
        public string AgencyPin { get; set; }
        public string Location { get; set; }
        public int PhysicalConcurrentUser { get; set; }
        public int VirtualConcurrentUser { get; set; }

    }

    private async void DateSelectedHandler()
    {
        foreach (var agency in AgencyList)
        {
            if (agency.AgencyId == AgencyValue)
            {
                if (TypeValue == 1)
                {
                    ConcurrentUser = agency.PhysicalConcurrentUser;
                    break;
                }
                if (TypeValue == 2)
                {
                    ConcurrentUser = agency.VirtualConcurrentUser;
                    break;
                }
            }
        }
        DateTimeSlotHelper dateTimeSlotHelper = new DateTimeSlotHelper();
        UserAgencyInput userAgencyInput = new UserAgencyInput();
        userAgencyInput.AgencyId = AgencyValue;
        userAgencyInput.AppointmentTypeId = TypeValue;
        userAgencyInput.SelectedDate = SelectedDate;
        userAgencyInput.ConcurrentUser = ConcurrentUser;
        selectedDateSlotList = new List<AvailableSlots>();
        var response = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/appointment/getavailableappointment", userAgencyInput);
        if (response != null)
        {
            var content = await response.Content.ReadAsStringAsync();
            var resultList = JsonConvert.DeserializeObject<List<AvailableSlots>>(content);
            List<AvailableSlots> listOfNewAvailableSlots = new List<AvailableSlots>();
            foreach (var result in resultList)
            {

                AvailableSlots availableSlots = new AvailableSlots() { Date = result.Date, Time = dateTimeSlotHelper.GetTimebySlot(result.SlotId), SlotId = result.SlotId };
                selectedDateSlotList.Add(availableSlots);


            }
        }

    }


    private void NavigateBook()
    {
        if (SelectedDate == null || SlotValue == null)
        {
            errorMessage = "Please Select a Valid Option from the dropdown selection.";
            this.StateHasChanged();
        }
        else
        {
            NavManager.NavigateTo("/appointment/appointmenteditappointmentsuccess/");
        }
    }

    private void NavigateCancel()
    {
        NavManager.NavigateTo("/appointment/appointmentviewallappointment/");
    }



}
