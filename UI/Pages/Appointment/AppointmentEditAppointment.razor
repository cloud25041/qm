
@page "/appointment/appointmenteditappointment/{appointmentId}"
@inject IModalService modal
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.Components.Routing
@using UI.Models;
@using Newtonsoft.Json;

@if (_loading)
{
    <h3>Loading Up Appointment Slots...</h3>
}
else
{
    <div class="col py-3 px-lg-5 border bg-light">
        New Appointment Date: <SfDatePicker TValue="DateTime?" Placeholder="Select a Date" Min="@MinDate" Max="@MaxDate"></SfDatePicker>
    </div>

    <div class="col py-3 px-lg-5 border bg-light">
        New Appointment Time: <SfTimePicker TValue="DateTime?" Placeholder="Select a Time" Min="@MinTime" Max="@MaxTime" Format="HH:mm" Step="30"></SfTimePicker>
    </div>

    <div class="col py-3">
        <button class="btn btn-primary" @onclick="NavigateEdit">Book</button>
        <button class="btn btn-secondary" @onclick="NavigateCancel">Cancel</button>
    </div>
    <button class="btn btn-secondary" @onclick="@(() => modal.Show<AppointmentEditFail>("Error!"))">Display Fail Modal</button>
}

@code
{

    [Parameter]
    public string appointmentId { get; set; }



    protected override async void OnInitialized()
    {


        var apptid = appointmentId;

        //Change to GUID and look into creating New GUID once and store that ID for reuse in test
        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/account/GetAppointmentByAppointmentId", appointmentId);

        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                var results = JsonConvert.DeserializeObject<AppointmentModel>(content);

                if (results != null)
                {
                    // logic here
                }
            }
        }


        //AppointmentTypeList = new List<AppointmentType>();
        //AppointmentTypeList.Add(new AppointmentType() { Type = "Physical", TypeId = 1 });
        //AppointmentTypeList.Add(new AppointmentType() { Type = "Virtual", TypeId = 2 });


    }

    private bool _loading;
    private bool _detailPickClickFlag = false;

    

    public DateTime? SelectedDate { get; set; } = null;
    public int SelectedSlot { get; set; }
    public IList<AvailableSlots> availableSlotList { get; set; }
    public IList<AvailableSlots> selectedDateSlotList { get; set; }

    // set minimum & maximum time
    public DateTime MaxTime { get; set; } = new DateTime(2021, 02, 20, 18, 00, 00);
    public DateTime MinTime { get; set; } = new DateTime(2021, 02, 20, 08, 00, 00);
    // set min & max dates
    public DateTime MinDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    public DateTime MaxDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month + 1, DateTime.Now.Day);


    // set location list
    public class LocationData
    {
        public string Name { get; set; }
        public string Id { get; set; }
    }

    private void DateSelectedHandler()
    {
        selectedDateSlotList = new List<AvailableSlots>();
        if (SelectedDate.HasValue == true)
        {
            foreach (var availableSlot in availableSlotList)
            {
                if (availableSlot.Date == SelectedDate)
                {
                    selectedDateSlotList.Add(availableSlot);
                }
            }
            this.StateHasChanged();
        }
    }


    private void NavigateEdit()
    {
        NavManager.NavigateTo("/appointment/appointmenteditappointmentsuccess");
    }

    private void NavigateCancel()
    {
        NavManager.NavigateTo("/appointment/appointmentmainselection/{accountId}/{username}/{password}");
    }



}
