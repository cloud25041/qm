
@page "/appointment/appointmentphysicalbooking/{accountId}/{serviceId}"
@inject IModalService modal
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject NavigationManager UriHelper
@using UI.Models;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Routing
@using System.ComponentModel.DataAnnotations;

<h3>Physical Appointment Booking</h3>

@if (_loading)
{
    <h3>Loading Up Appointment Slots...</h3>
}
else
{
    <p class=" alert-danger"><strong>@errorMessage</strong></p>

    if (_detailPickClickFlag)
    {
        <div class="col py-3 px-lg-5 border bg-light">
            Physical Appointment Date: <SfDatePicker TValue="DateTime?" @bind-Value="@SelectedDate" Placeholder="Select a Date" Min="@MinDate" Max="@MaxDate">
                <DatePickerEvents TValue="DateTime?" ValueChange="DateSelectedHandler"></DatePickerEvents>
            </SfDatePicker>
        </div>
    }
    if (SelectedDate != null)
    {
        <p>DropDownList value is:<strong>@SelectedDate.Value.Date</strong></p>
        <div class="col py-3 px-lg-5 border bg-light">
            Available Time: <SfDropDownList TItem="AvailableSlots" TValue="int?" @bind-Value="@DropVal" DataSource="@selectedDateSlotList" Placeholder="Select a Time">
                <DropDownListFieldSettings Text="Time" Value="SlotId"></DropDownListFieldSettings>
            </SfDropDownList>
        </div>
        <p>DropDownList value is:<strong>@DropVal</strong></p>

    }
    if (_display == true)
    {
        <p>Date is: @test1</p>
        <p>Time slot is: @test2</p>
    }
    <div class="col py-3">
        <button class="btn btn-primary" @onclick="NavigateBook">Book</button>
        <button class="btn btn-secondary" @onclick="NavigateCancel">Cancel</button>
    </div>
    <button class="btn btn-secondary" @onclick="@(() => modal.Show<AppointmentBookingFail>("Booking has Failed"))">Display Fail Modal</button>
}

@code
{
    protected override async void OnInitialized()
    {
        var response = await HttpClient.GetAsync("https://localhost:44355/api/userqueue/getagencyappointmentinformation");
        if (response != null)
        {
            string content = await response.Content.ReadAsStringAsync();
            var resultList = JsonConvert.DeserializeObject<IList<AvailableSlots>>(content);
            availableSlotList = resultList;
            _detailPickClickFlag = true;
            this.StateHasChanged();
        }
    }

    #region Fields

    private bool _loading;
    private bool _detailPickClickFlag = false;
    public int? DropVal;

    public DateTime? test1;
    public string test2;
    private string errorMessage;
    private bool _display = false;

    #endregion

    #region Properties

    [Parameter]
    public string accountId { get; set; }
    [Parameter]
    public string userName { get; set; }
    [Parameter]
    public string password { get; set; }
    [Parameter]
    public string appointmentDate { get; set; }
    [Parameter]
    public string appointmentTime { get; set; }
    [Parameter]
    public string queueNo { get; set; }
    [Parameter]
    public string serviceId { get; set; }

    // set min & max dates
    public DateTime MaxDate { get; set; } = DateTime.Now.AddDays(31).Date;
    public DateTime MinDate { get; set; } = DateTime.Now.Date;

    public DateTime? SelectedDate { get; set; } = null;
    public int SelectedSlot { get; set; }

    public class AvailableSlots
    {
        public DateTime Date { get; set; }

        public string Time { get; set; }

        public int SlotId { get; set; }
    }

    public IList<AvailableSlots> availableSlotList { get; set; }
    public IList<AvailableSlots> selectedDateSlotList { get; set; }


    #endregion

    #region Private Method
    //ChangedEventArgs<DateTime?> args
    private void DateSelectedHandler()
    {
        selectedDateSlotList = new List<AvailableSlots>();
        if (SelectedDate.HasValue == true)
        {
            foreach (var availableSlot in availableSlotList)
            {
                if (availableSlot.Date == SelectedDate)
                {
                    selectedDateSlotList.Add(availableSlot);
                }
            }
            this.StateHasChanged();
        }
    }

    private void NavigateBook()
    {
        if (SelectedDate == null || DropVal == null)
        {
            errorMessage = "Please Select a Valid Appointent Date & Time from the dropdown selection.";
            this.StateHasChanged();
        }
        else
        {
            //Testing
            _display = true;
            test1 = SelectedDate;
            foreach (var availableSlot in availableSlotList)
            {
                if (availableSlot.SlotId == DropVal && availableSlot.Date == SelectedDate)
                {
                    test2 = availableSlot.Time;
                    this.StateHasChanged();
                    break;
                }
            }
            appointmentDate = SelectedDate.Value.Date.ToString("dd MMM yyyy");
            appointmentTime = test2;
            queueNo = "Q100";
        }
        NavManager.NavigateTo("/appointment/appointmentphysicalbookingsuccess/{accountId}/{appointmentDate}/{appointmentTime}/{queueNo}");
    }

    private void NavigateCancel()
    {
        NavManager.NavigateTo("/appointment/appointmentmainselection/{accountId}/{username}/{password}");
    }


    #endregion

}
