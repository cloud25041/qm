
@page "/appointment/appointmentviewallappointment"
@inject IModalService modal
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject NavigationManager UriHelper

@using Newtonsoft.Json;
@using UI.Models;
@using Microsoft.AspNetCore.Components.Routing
@inject LocalStorage.ILocalStorageService localStorage;
@using UI.DateTimeSlotHelper;




<h3>All Existing Appointments</h3>

@if (_loading)
{
    <h3>Registering...</h3>
}
else
{

    if (gotAppointmentFlag)
    {

        <thead class="table-primary">
            <tr>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Agency</th>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Appointment Type</th>
                <th class="col-xs-2 col-sm-2 col-md-2 col-lg-2" style="text-align:center">Date</th>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Timeslot</th>
                <th class="col-xs-4 col-sm-4 col-md-4 col-lg-4" style="text-align:center">Zoom Link</th>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">Action</th>
            </tr>
        </thead>

        if (AppointmentList != null)
        {
            foreach (var appointment in AppointmentList)
            {
                foreach (var agency in AgencyList)
                {
                    if (appointment.AgencyId == agency.AgencyId)
                    {

                        if (appointment.AppointmentType == 1)
                        {
                            appointmentTypeName = "Physical";
                        }
                        else
                        {
                            appointmentTypeName = "Virtual";
                        }

                        DateTimeSlotHelper dateTimeSlotHelper = new DateTimeSlotHelper();
                        var tempTime = dateTimeSlotHelper.GetTimebySlot(appointment.AppointmentSlotId);

                        if (appointment.AppointmentState == 1 || appointment.AppointmentState == 2 || appointment.AppointmentState == 3)
                        {
                            <div>
                                <table class="table table-hover">

                                    <tbody>
                                        <tr>
                                            <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">@agency.AgencyName</td>
                                            <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">@appointmentTypeName</td>
                                            <td class="col-xs-2 col-sm-2 col-md-2 col-lg-2" style="text-align:center">@appointment.AppointmentDate.ToLongDateString()</td>
                                            <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">@tempTime</td>
                                            <td class="col-xs-4 col-sm-4 col-md-4 col-lg-4" style="text-align:center">@appointment.ZoomLink</td>
                                            <td class="col-xs-1 col-sm-1 col-md-1 col-lg-1" style="text-align:center">
                                                <button class="btn btn-primary" @onclick=@(() => EditButton(appointment.AppointmentId))>Edit</button>
                                                <button class="btn btn-danger" @onclick=@((DeleteButton))>Delete</button>
                                            </td>
                                        </tr>

                                    </tbody>
                                </table>
                            </div>
                        }


                    }
                }



            }
        }


    }
    else
    {

        <tr>
            <td colspan="5">No Record Found.</td>
        </tr>

    }


}

<button class="btn btn-dark" @onclick=@((BackButton))>Back</button>
<button class="btn btn-outline-dark" @onclick="@(() => modal.Show<AppointmentDeleteFail>("Delete Failed"))">Display Delete Fail Modal</button>



@code
{
    int i = 0;

    #region Field


    [Parameter]
    public string accountId { get; set; }
    [Parameter]
    public string userName { get; set; }

    public string appointmentName { get; set; }
    [Parameter]
    public Guid appointmentId { get; set; }

    public string zoomLink { get; set; }

    public int agencyId { get; set; }
    public int appointmentType { get; set; }
    public string appointmentTypeName { get; set; }

    public DateTime appointmentDate { get; set; }
    public int appointmentSlotId { get; set; }

    public List<AppointmentDetails> AppointmentList { get; set; }
    public List<Agency> AgencyList { get; set; }

    //public IList<AppointmentDetails> AppointmentList { get; set; }
    public string agency { get; set; }
    public string service { get; set; }
    public string location { get; set; }
    public string appointmentTime { get; set; }


    string[] agencyArray = new string[5];
    string[] serviceArray = new string[5];
    string[] locationArray = new string[5];

    private bool gotAppointmentFlag = false;
    #endregion

    protected override async void OnInitialized()
    {
        // call local storage
        AccountInfo accountInfo = await localStorage.GetItem<AccountInfo>("account_info");
        AppointmentList = new List<AppointmentDetails>();
        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/appointment/GetAppointmentDetailsByAccountId", accountInfo.accountId);
        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                var content = await responseMessage.Content.ReadAsStringAsync();
                Console.WriteLine(content);
                var results = JsonConvert.DeserializeObject<List<AppointmentDetails>>(content);
                if (results.Count > 0)
                {
                    gotAppointmentFlag = true;

                    var responseForAgency = await HttpClient.GetAsync("https://localhost:44310/api/appointment/getagencyinfolist");
                    if (responseForAgency.IsSuccessStatusCode)
                    {
                        var contentForAgency = await responseForAgency.Content.ReadAsStringAsync();
                        AgencyList = JsonConvert.DeserializeObject<List<Agency>>(contentForAgency);

                        if (AgencyList != null)
                        {
                            var listOfAgency = await localStorage.GetItem<List<Agency>>("agency_info");
                            listOfAgency = AgencyList;
                            string agencyName;
                            foreach (var agency2 in listOfAgency)
                            {
                                if (agency2.AgencyId == agencyId)
                                {
                                    agencyName = agency2.AgencyName;
                                }
                            }
                        }

                    }

                }
                foreach (var eachResults in results)
                {
                    i = AppointmentList.Count;
                    AppointmentList.Add(eachResults);
                    this.StateHasChanged();
                }

                this.StateHasChanged();

            }
            else
            {
                var content = await responseMessage.Content.ReadAsStringAsync();
                accountId = "1234";
            }
        }
    }






    private bool _loading;

    private void BackButton()
    {
        NavManager.NavigateTo("/appointment/appointmentmainselection");
    }

    private void DeleteButton()
    {
        //modal.Show<AppointmentDeleteConfirmation>("Confirm Delete Appointment?");
    }

    private void EditButton(Guid AppointmentId)
    {
        string apptid = AppointmentId.ToString();
        NavManager.NavigateTo($"/appointment/appointmenteditappointment/{apptid}");
    }


}
