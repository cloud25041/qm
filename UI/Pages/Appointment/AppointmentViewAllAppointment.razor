
@page "/appointment/appointmentviewallappointment"
@inject IModalService modal
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject NavigationManager UriHelper

@using Newtonsoft.Json;
@using UI.Models;
@using Microsoft.AspNetCore.Components.Routing
@inject LocalStorage.ILocalStorageService localStorage;




<h3>All Existing Appointments</h3>

@if (_loading)
{
    <h3>Registering...</h3>
}
else
{

    if (gotAppointmentFlag)
    {
        <thead class="table-primary">
            <tr>
                <th class="col-xs-1 col-sm-1 col-md-1 col-lg-1">Agency</th>
                <th class="col-xs-1 col-sm-2 col-md-2 col-lg-2">Appointment Type</th>
                <th class="col-xs-4 col-sm-2 col-md-2 col-lg-2">Location</th>
                <th class="col-xs-2 col-sm-1 col-md-1 col-lg-1">Date</th>
                <th class="col-xs-2 col-sm-1 col-md-1 col-lg-1">Slot (Time)</th>
                <th class="col-xs-2 col-sm-2 col-md-2 col-lg-2">Action</th>
            </tr>
        </thead>
        if (AppointmentList != null)
        {
            foreach (var appointment in AppointmentList)
            {
                <div class="table-responsive">
                    <table class="table table-sm table-hover">

                        <tbody>
                            <tr>
                                <td>@appointment.AgencyId</td>
                                <td>@appointment.AppointmentSlotId</td>
                                <td>@appointment.AppointmentState</td>
                                <td>@appointment.AppointmentDate</td>
                                <td style="display:none;"> 1 </td>
                                <td style="display:none;">@appointment.AppointmentId</td>
                                <td>
                                    <button class="btn btn-primary" @onclick=@(() => EditButton(appointment.AppointmentId))>Edit</button>
                                    <button class="btn btn-danger" @onclick=@((DeleteButton))>Delete</button>
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </div>

            }
        }


    }
    else
    {

        <tr>
            <td colspan="5">No Record Found.</td>
        </tr>

    }


}

<button class="btn btn-dark" @onclick=@((BackButton))>Back</button>
<button class="btn btn-outline-dark" @onclick="@(() => modal.Show<AppointmentDeleteFail>("Delete Failed"))">Display Delete Fail Modal</button>
@*<button class="btn btn-dark" @onclick=@GetAppointment>Appointment</button>*@
<button class="btn btn-dark" @onclick=@EditAppointment>Appointment</button>
@*<button class="btn btn-primary" @onclick="RegisterAccount">Register</button>
    <button class="btn btn-primary" @onclick="@(() => modal.Show<Counter>("test"))">Try modal</button>*@


<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@accountId" />
</div>
<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@appointmentName" />
</div>
<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@agencyArray[1]" />
</div>
<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@service" />
</div>
<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@location" />
</div>
<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@appointmentTime" />
</div>
<div class="col py-3 px-lg-5 border bg-light">
    Text: <input type="text" @bind="@appointmentId" />
</div>




@code
{
    int i = 0;

    #region Field


    [Parameter]
    public string accountId { get; set; }
    [Parameter]
    public string userName { get; set; }

    public string appointmentName { get; set; }
    [Parameter]
    public Guid appointmentId { get; set; }

    public int agencyId { get; set; }

    public DateTime appointmentDate { get; set; }
    public int appointmentSlotId { get; set; }

    public List<AppointmentDetails> AppointmentList { get; set; }

    //public IList<AppointmentDetails> AppointmentList { get; set; }
    public string agency { get; set; }
    public string service { get; set; }
    public string location { get; set; }
    public string appointmentTime { get; set; }


    string[] agencyArray = new string[5];
    string[] serviceArray = new string[5];
    string[] locationArray = new string[5];

    private bool gotAppointmentFlag = false;
    #endregion

    protected override async void OnInitialized()
    {
        //accountId = "1234";
        //AppointmentList = new List<AppointmentDetails>();
        // call local storage
        AccountInfo accountInfo = localStorage.GetAccountInfo();
        AppointmentList = new List<AppointmentDetails>();
        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/appointment/GetAppointmentDetails", accountInfo.accountId);
        if (responseMessage != null)
        {
            // var results = new List<AppointmentDetails>();
            if (responseMessage.IsSuccessStatusCode)
            {
                var content = await responseMessage.Content.ReadAsStringAsync();
                Console.WriteLine(content);
                //var results = JsonConvert.DeserializeObject<IList<AppointmentDetails>>(content);
                var results = JsonConvert.DeserializeObject<List<AppointmentDetails>>(content);
                if (results.Count > 0)
                {
                    gotAppointmentFlag = true;
                }
                foreach (var eachResults in results)
                {

                    appointmentName = appointmentName + eachResults.AppointmentId;
                    //AppointmentList.Add(eachResults);
                    i = AppointmentList.Count;
                    // appointmentName = appointmentName + eachResults.AppointmentName;
                    //agency = eachResults.AppointmentId;
                    //agencyArray[i] = agency + i.ToString();

                    //service = eachResults.Service;
                    //serviceArray[i] = service + i.ToString();

                    appointmentDate = eachResults.AppointmentDate;
                    locationArray[i] = location + i.ToString();

                    appointmentSlotId = appointmentSlotId + eachResults.AppointmentSlotId;
                    //appointmentId = appointmentId + eachResults.AppointmentId;
                    AppointmentList.Add(eachResults);
                    this.StateHasChanged();
                }
                this.StateHasChanged();

            }
            else
            {
                var content = await responseMessage.Content.ReadAsStringAsync();
                accountId = "1234";
            }
        }

        var responseMessage2 = await HttpClient.GetAsync("https://localhost:44310/api/appointment/getagencyinfolist");
        if (responseMessage != null)
            {

            }
    }






    private bool _loading;

    private void BackButton()
    {
        NavManager.NavigateTo("/appointment/appointmentmainselection");
    }

    private void DeleteButton()
    {
        modal.Show<AppointmentDeleteConfirmation>("Confirm Delete Appointment?");
    }

    private void EditButton(Guid AppointmentId)
    {
        // To add conditions, temporarily routing to appointment physical booking page


        NavManager.NavigateTo($"/appointment/appointmenteditappointment/{AppointmentId}");

        // Guid apptid = Guid.Parse("3ec2bc2d-88df-4850-a4f2-5f3571d180ad");
        // NavManager.NavigateTo($"/appointment/appointmenteditappointment/{apptid}");
        /*
        //Change to GUID and look into creating New GUID once and store that ID for reuse in test
        var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/account/GetAppointmentByAppointmentId", apptid);

        if (responseMessage != null)
        {
            if (responseMessage.IsSuccessStatusCode)
            {
                string content = await responseMessage.Content.ReadAsStringAsync();
                var results = JsonConvert.DeserializeObject<AppointmentModel>(content);

                if (results != null)
                {
                    NavManager.NavigateTo($"/appointment/appointmenteditappointment/{apptid}");
                }
            }
        }
        */
        //appointmentId = AppointmentId;
        //NavManager.NavigateTo($"/appointment/appointmenteditappointment/{appointmentId}");
        //NavManager.NavigateTo("/appointment/appointmentvirtualbooking");

        //modal.Show<AppointmentDeleteConfirmation>("Confirm Delete Appointment?");

    }

    private async Task EditAppointment()
    {
        //Guid apptid = Guid.Parse("3ec2bc2d-88df-4850-a4f2-5f3571d180ad");
        var apptid = "3ec2bc2d-88df-4850-a4f2-5f3571d180ad";

        NavManager.NavigateTo($"/appointment/appointmenteditappointment/{apptid}");
        //Change to GUID and look into creating New GUID once and store that ID for reuse in test
        /* var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/account/GetAppointmentByAppointmentId", apptid);

         if (responseMessage != null)
         {
             if (responseMessage.IsSuccessStatusCode)
             {
                 string content = await responseMessage.Content.ReadAsStringAsync();
                 var results = JsonConvert.DeserializeObject<AppointmentModel>(content);

                 if (results != null)
                 {
                     NavManager.NavigateTo($"/appointment/appointmenteditappointment/{apptid}");
                 }
             }
         }
        */
    }





    //private async Task GetAppointment()
    //{
    //    List<AppointmentDetails> AppointmentList = new List<AppointmentDetails>();
    //    var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44351/api/UserQueue/GetAppointmentDetails", accountId);
    //    if (responseMessage != null)
    //    {
    //        // var results = new List<AppointmentDetails>();
    //        if (responseMessage.IsSuccessStatusCode)
    //        {
    //            var content = await responseMessage.Content.ReadAsStringAsync();
    //            Console.WriteLine(content);
    //            var results = JsonConvert.DeserializeObject<IList<AppointmentDetails>>(content);
    //            foreach (var eachResults in results)
    //            {

    //                appointmentName = appointmentName + eachResults.AppointmentName;
    //                //AppointmentList.Add(eachResults);
    //                i = AppointmentList.Count;
    //                // appointmentName = appointmentName + eachResults.AppointmentName;
    //                agency = eachResults.Agency;
    //                agencyArray[i] = agency + i.ToString();

    //                service = eachResults.Service;
    //                serviceArray[i] = service + i.ToString();

    //                location = eachResults.Location;
    //                locationArray[i] = location + i.ToString();

    //                appointmentTime = appointmentTime + eachResults.AppointmentTime;
    //                //appointmentId = appointmentId + eachResults.AppointmentId;
    //                AppointmentList.Add(eachResults);
    //            }


    //        }
    //        else
    //        {
    //            var content = await responseMessage.Content.ReadAsStringAsync();
    //            accountId = "1234";
    //        }


    //    }
    //    else
    //    {
    //    }

    //}



    //protected async override void OnAfterRender(bool firstRender)
    //{
    // execute conditionally for loading data, otherwise this will load
    // every time the page refreshes
    //  if (firstRender)
    //{
    // Do work to load page data and set properties

    //  await GetAppointment();


    //}
    //}

}
