
@page "/staffsignup"
@inject HttpClient HttpClient
@inject IModalService modal
@inject NavigationManager NavManager
@using UI.Models;
@using Newtonsoft.Json;

<h3>Staff Signup</h3>

@if (_loading)
{
    <h3>Registering...</h3>
}
else
{
    <div class="col py-3 px-lg-5 border bg-light">
        First name: <input type="text" @bind="@FirstName" />
       
    </div>

    <div class="col py-3 px-lg-5 border bg-light">
        Last name: <input type="text" @bind="@LastName" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Username: <input type="text" @bind="@Username" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Password: <input type="text" @bind="@Password" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Mobile number: <input type="text" @bind="@MobileNo" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Email: <input type="text" @bind="@Email" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Staff Sign Up Code: <input type="text" @bind="@StaffKey" />
    </div>
    <div class="col py-3 px-lg-5 border bg-light">
        Kiosk Account: <input type="checkbox" @onclick="@IsKioskChecked" />
    </div>
    <button class="btn btn-primary" @onclick="RegisterAccount">Register</button>
    <button class="btn btn-secondary" @onclick="BackFunction">Cancel</button>
}

@code
{
    #region Fields
    private string _firstName;
    private string _lastName;
    private string _username;
    private string _password;
    private string _mobileNo;
    private string _email;
    private string _staffkey;
    private bool _loading;
    private bool _isKiosk = false;
    #endregion


    #region Properties


    public string FirstName
    {
        get { return _firstName; }
        set { _firstName = value; }
    }

    public string LastName
    {
        get { return _lastName; }
        set { _lastName = value; }
    }

    public string Username
    {
        get { return _username; }
        set { _username = value; }
    }

    public string Password
    {
        get { return _password; }
        set { _password = value; }
    }

    public string MobileNo
    {
        get { return _mobileNo; }
        set { _mobileNo = value; }
    }

    public string Email
    {
        get { return _email; }
        set { _email = value; }
    }
    public string StaffKey
    {
        get { return _staffkey; }
        set { _staffkey = value; }
    }


    #endregion

    #region Private Method


    private async Task BackFunction()
    {
        NavManager.NavigateTo("/account");
    }

    private async Task IsKioskChecked()
    {
        if (_isKiosk == false)
        {
            _isKiosk = true;
        }

        else
        {
            _isKiosk = false;
        }

    }
    private async Task RegisterAccount()
    {

        string validationMessage;

        validationMessage = ValidationCheck(Username, Password, MobileNo, Email, StaffKey, FirstName, LastName);

        if(validationMessage != null || validationMessage == "")
        {
            modal.Show<FailedValidation>(validationMessage);
        }

        else
        {
            SignUpAccountDetails accountDetails = new SignUpAccountDetails();
            accountDetails.TransactionId = Guid.NewGuid();
            accountDetails.FirstName = FirstName;
            accountDetails.LastName = LastName;
            accountDetails.Username = Username;
            accountDetails.Password = Password;
            accountDetails.MobileNo = MobileNo;
            accountDetails.Email = Email;
            accountDetails.StaffKey = StaffKey;
            accountDetails.isKiosk = _isKiosk;
            accountDetails.isUser = false;



            var checkResponseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44355/api/account/staffaccountcheckdetails", accountDetails);

            if (checkResponseMessage.IsSuccessStatusCode)
            {

                var contentForCheck = await checkResponseMessage.Content.ReadAsStringAsync();
                var resultsForCheck = JsonConvert.DeserializeObject<ValidationDetails>(contentForCheck);
                if (resultsForCheck.UsernameTaken == false && resultsForCheck.IsStaffKeyCorrect == true)
                {
                    var responseMessage = await HttpClient.PostAsJsonAsync("https://localhost:44355/api/account/staffaccountcreateTest", accountDetails);


                    if (responseMessage != null)
                    {
                        if (responseMessage.IsSuccessStatusCode)
                        {
                            //pop up something
                            //  ModalParameters modalParameters = new ModalParameters();
                            //  modalParameters.Add("TransactionId", accountDetails.TransactionId);
                            //  modal.Show(typeof(EmailMobileVerification), "Email & Mobile Verification", modalParameters);

                            _loading = true;
                            this.StateHasChanged();
                            modal.Show<SuccessLogin>("Account created");
                        }
                        else
                        {
                            string reason = responseMessage.ReasonPhrase;
                            modal.Show<SuccessLogin>("Account not created");
                        }
                    }

                    else
                    {

                    }
                }

                else

                {
                    //ModalParameters modalParameters = new ModalParameters();
                    //modalParameters.Add("TransactionId", accountDetails.TransactionId);

                    if (resultsForCheck.IsStaffKeyCorrect == false && resultsForCheck.UsernameTaken == false)
                    {
                        modal.Show<FailedValidation>("Staff Key is wrong");
                    }
                    else if (resultsForCheck.UsernameTaken == true && resultsForCheck.IsStaffKeyCorrect == true)
                    {
                        modal.Show<FailedValidation>("Username taken");
                    }

                    else
                    {
                        modal.Show<FailedValidation>("Username taken and Staff key is wrong");
                    }


                    // username taken
                }
                _loading = false;
                this.StateHasChanged();
            }
        }


    }


    private string ValidationCheck(string username, string password, string mobileno, string email, string staffkey, string firstname, string lastname)
    {
        string errorMessage = "Please enter your ";

        if(firstname == "" || firstname == null)
        {
            errorMessage = errorMessage + "First Name, ";
        }

        if(lastname == "" || lastname == null)
        {
            errorMessage = errorMessage + "Last Name, ";
        }


        if(username == "" || username == null)
        {
            errorMessage = errorMessage + "Username, ";

        }

        if(password == "" || password == null)
        {
            errorMessage = errorMessage + "Password, ";
        }

        if(mobileno == "" || mobileno == null)
        {
            errorMessage = errorMessage + "Mobile Number, ";

        }

        if(email == "" || email == null)
        {
            errorMessage = errorMessage + "Email, ";
        }

        if(staffkey == "" || staffkey == null)
        {
            errorMessage = errorMessage + "Staff Key, ";
        }

        else
        {
            errorMessage = null;
        }

        return errorMessage;



    }

    #endregion




}
